name: CI
on:
  # - pull_request
  - push

jobs:
  build:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2019
          - ubuntu-22.04
        d:
          - "ldc-latest"
        compiler:
          - llvm-15
        include:
          - os: macos-14 # arm64
            d: "ldc-latest"
            compiler: "llvm-15"
          - os: macos-13 # x86
            d: "ldc-latest"
            compiler: "llvm-15"

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "true"

      # Cache
      - name: Cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.dub
            ~/AppData/Local/dub
            ~/.pnpm
            ~/.pnpm-store
            D:\.pnpm-store
            D:\.pnpm
            ./.dub
          key: "cache-OS:${{ matrix.os }}-D:${{ matrix.d }}-CXX:${{ matrix.compiler }}-${{ hashFiles('./dub.selections.json', './pnpm-lock.yaml','./package.json', './.nvmrc', './dub.sdl')}} }}"
          restore-keys: |
            "cache-OS:${{ matrix.os }}-D:${{ matrix.d }}-CXX:${{ matrix.compiler }}-"

      # Setup compilers and tools
      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          cmake: true
          ninja: true

      - name: Setup D
        uses: dlang-community/setup-dlang@v2
        with:
          compiler: ${{ matrix.d }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Setup Pnpm
        uses: pnpm/action-setup@v4

      # Build and Test

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build.node

      - name: Test
        run: pnpm test

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: minijson-${{ runner.os }}-${{ runner.arch }}
          path: ./dist
          retention-days: 1

  Release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          delete-merged: true

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          name: merged-artifacts
          path: dist/

      - name: Prepare Dist
        run: |
          chmod +x ./dist/*/minijson
          zip -9 -j ./dist/minijson-windows-x64.zip ./dist/win32-x64/minijson.exe
          tar -czf ./dist/minijson-macos-x64.tar.gz -C ./dist/darwin-x64 minijson
          tar -czf ./dist/minijson-macos-arm64.tar.gz -C ./dist/darwin-arm64 minijson
          tar -czf ./dist/minijson-linux-x64.tar.gz -C ./dist/linux-x64 minijson
          ls -l ./dist

      - name: Draft the release
        uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          gzip: folders
          draft: true
          files: >
            dist/minijson-windows-x64.zip
            dist/minijson-macos-x64.tar.gz
            dist/minijson-macos-arm64.tar.gz
            dist/minijson-linux-x64.tar.gz

      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install

      - name: Publish to npm
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
